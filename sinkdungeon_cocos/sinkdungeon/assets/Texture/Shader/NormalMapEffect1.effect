// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        diffuseTexture: { value: white }
        normalTexture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  attribute vec3 tangent;
	varying vec3 lightVec;
	varying vec3 halfVec;
	varying vec3 eyeVec;

  void main () {
    gl_TexCoord[0] =  gl_MultiTexCoord0;
    
    // Building the matrix Eye Space -> Tangent Space
	  vec3 n = normalize (gl_NormalMatrix * gl_Normal);
	  vec3 t = normalize (gl_NormalMatrix * tangent);
	  vec3 b = cross (n, t);
	
	  vec3 vertexPosition = vec3(gl_ModelViewMatrix *  gl_Vertex);
	  vec3 lightDir = normalize(gl_LightSource[0].position.xyz - vertexPosition);
    
    // transform light and half angle vectors by tangent basis
	  vec3 v;
	  v.x = dot (lightDir, t);
	  v.y = dot (lightDir, b);
	  v.z = dot (lightDir, n);
	  lightVec = normalize (v);
    
    v.x = dot (vertexPosition, t);
	  v.y = dot (vertexPosition, b);
	  v.z = dot (vertexPosition, n);
	  eyeVec = normalize (v);
    
    vertexPosition = normalize(vertexPosition);
    
    /* Normalize the halfVector to pass it to the fragment shader */
    
    // No need to divide by two, the result is normalized anyway.
	  // vec3 halfVector = normalize((vertexPosition + lightDir) / 2.0); 
	  vec3 halfVector = normalize(vertexPosition + lightDir);
	  v.x = dot (halfVector, t);
	  v.y = dot (halfVector, b);
	  v.z = dot (halfVector, n);

	  // No need to normalize, t,b,n and halfVector are normal vectors.
	  //normalize (v);
	  halfVec = v ; 
	  
	  gl_Position = ftransform();
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  uniform sampler2D diffuseTexture;
  uniform sampler2D normalTexture;
  // New bumpmapping
	varying vec3 lightVec;
	varying vec3 halfVec;
	varying vec3 eyeVec;
  void main () {
    // lookup normal from normal map, move from [0,1] to  [-1, 1] range, normalize
    vec3 normal = 2.0 * texture2D (normalTexture, gl_TexCoord[0].st).rgb - 1.0;
    normal = normalize (normal);
    
    // compute diffuse lighting
	  float lamberFactor= max (dot (lightVec, normal), 0.0) ;
	  vec4 diffuseMaterial = 0.0;
	  vec4 diffuseLight  = 0.0;
	
	  // compute specular lighting
	  vec4 specularMaterial ;
	  vec4 specularLight ;
	  float shininess ;
  
	  // compute ambient
	  vec4 ambientLight = gl_LightSource[0].ambient;	
	
	  if (lamberFactor > 0.0){
		  diffuseMaterial = texture2D (diffuseTexture, gl_TexCoord[0].st);
		  diffuseLight  = gl_LightSource[0].diffuse;
		
		  // In doom3, specular value comes from a texture 
		  specularMaterial =  vec4(1.0)  ;
		  specularLight = gl_LightSource[0].specular;
		  shininess = pow (max (dot (halfVec, normal), 0.0), 2.0)  ;
		 
		  gl_FragColor =	diffuseMaterial * diffuseLight * lamberFactor ;
		  gl_FragColor +=	specularMaterial * specularLight * shininess ;
      }
      gl_FragColor +=	ambientLight;
  }
}%
