{
  "ver": "1.0.23",
  "uuid": "84cda3d4-753c-4d8c-a01a-88b007959407",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\n  precision highp float;\n\n  attribute vec3 tangent;\nattribute vec3 bitangent;\n\nvarying vec3 N;\nvarying vec3 V;\nvarying vec3 E;\n\nvarying vec3 T;\nvarying vec3 B;\n\nvoid main()\n{\n    N = normalize(gl_NormalMatrix*gl_Normal);\n    V = vec3(gl_ModelViewMatrix*gl_Vertex);\n    E = normalize(-V);\n\n    T = normalize(gl_NormalMatrix*tangent);\n    B = normalize(gl_NormalMatrix*bitangent);\n\n    gl_TexCoord[0] = gl_MultiTexCoord0;\n    gl_Position = gl_ModelViewProjectionMatrix*gl_Vertex;\n}\n",
        "frag": "\n  precision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\n  uniform sampler2D diffuseTexture;\n  uniform sampler2D normalTexture;\n  varying vec3 N;\nvarying vec3 V;\nvarying vec3 E;\n\nvarying vec3 B;\nvarying vec3 T;\n\nvoid main()\n{\n\n    mat3 TBN = mat3 (T, B, N);\n\n    vec3 normal = normalize (texture2D(normalTexture,gl_TexCoord[0].st).xyz*2.0 - 1.0);\n\n    vec4 color = vec4(0,0,0,0);\n    for(int i = 0; i < 1; i++)\n    {\n        vec4 lightPos = gl_LightSource[i].position;\n        vec3 L = lightPos.w > 0 ? lightPos.xyz - V : lightPos;\n\n        L *= TBN;\n\n        float dist = length(L);\n        L = normalize(L);\n\n        float NdotL = max(dot(L,N),0.0);\n        if(NdotL > 0)\n        {\n            float att = 1.0;\n            if(lightPos.w > 0)\n            {\n                att = 1.0/ (gl_LightSource[i].constantAttenuation +\n                gl_LightSource[i].linearAttenuation * dist +\n                gl_LightSource[i].quadraticAttenuation * dist * dist);\n            }\n\n            vec4 diffuse =  clamp(att*NdotL*gl_FrontLightProduct[i].diffuse,0,1);\n            color += att*gl_FrontLightProduct[i].ambient + diffuse;\n        }\n    }\n\n    vec4 textureColor = texture2D(diffuseTexture, vec2(gl_TexCoord[0]));\n    gl_FragColor = textureColor + gl_FrontLightModelProduct.sceneColor + color;\n}\n"
      },
      "glsl3": {
        "vert": "\n  precision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\n  attribute vec3 tangent;\nattribute vec3 bitangent;\n\nvarying vec3 N;\nvarying vec3 V;\nvarying vec3 E;\n\nvarying vec3 T;\nvarying vec3 B;\n\nvoid main()\n{\n    N = normalize(gl_NormalMatrix*gl_Normal);\n    V = vec3(gl_ModelViewMatrix*gl_Vertex);\n    E = normalize(-V);\n\n    T = normalize(gl_NormalMatrix*tangent);\n    B = normalize(gl_NormalMatrix*bitangent);\n\n    gl_TexCoord[0] = gl_MultiTexCoord0;\n    gl_Position = gl_ModelViewProjectionMatrix*gl_Vertex;\n}\n",
        "frag": "\n  precision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\n  uniform sampler2D diffuseTexture;\n  uniform sampler2D normalTexture;\n  varying vec3 N;\nvarying vec3 V;\nvarying vec3 E;\n\nvarying vec3 B;\nvarying vec3 T;\n\nvoid main()\n{\n\n    mat3 TBN = mat3 (T, B, N);\n\n    vec3 normal = normalize (texture2D(normalTexture,gl_TexCoord[0].st).xyz*2.0 - 1.0);\n\n    vec4 color = vec4(0,0,0,0);\n    for(int i = 0; i < 1; i++)\n    {\n        vec4 lightPos = gl_LightSource[i].position;\n        vec3 L = lightPos.w > 0 ? lightPos.xyz - V : lightPos;\n\n        L *= TBN;\n\n        float dist = length(L);\n        L = normalize(L);\n\n        float NdotL = max(dot(L,N),0.0);\n        if(NdotL > 0)\n        {\n            float att = 1.0;\n            if(lightPos.w > 0)\n            {\n                att = 1.0/ (gl_LightSource[i].constantAttenuation +\n                gl_LightSource[i].linearAttenuation * dist +\n                gl_LightSource[i].quadraticAttenuation * dist * dist);\n            }\n\n            vec4 diffuse =  clamp(att*NdotL*gl_FrontLightProduct[i].diffuse,0,1);\n            color += att*gl_FrontLightProduct[i].ambient + diffuse;\n        }\n    }\n\n    vec4 textureColor = texture2D(diffuseTexture, vec2(gl_TexCoord[0]));\n    gl_FragColor = textureColor + gl_FrontLightModelProduct.sceneColor + color;\n}\n"
      }
    }
  ],
  "subMetas": {}
}